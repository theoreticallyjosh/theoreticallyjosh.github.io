<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Theoretically Josh</title><link>/post/</link><description>Recent content in Posts on Theoretically Josh</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 24 Jul 2025 07:15:05 -0700</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml"/><item><title>AI Hammer</title><link>/post/ai-hammer/</link><pubDate>Thu, 24 Jul 2025 07:15:05 -0700</pubDate><guid>/post/ai-hammer/</guid><description>&lt;p>“How can we put AI into our product?” How many of you have heard or said that recently? With all the hype around AI recently, it’s understandable why. However, it is the wrong question to ask.&lt;/p>
&lt;h2 id="what-is-meant-by-ai">What is meant by AI?&lt;/h2>
&lt;p>Let’s define what we are talking about here. While AI is a broad scope of tools and techniques that have been around for decades, most people, especially in the context mentioned above, mean Large Language Models or LLMs. You know, the ChatGPTs, Google Geminis, and Groks of the world. It is no surprise that LLMs have become the frontman of the AI world. They introduce a huge leap in what we think of AI and how we even define what intelligence means. For many, it’s a magic black box that you type or speak questions into, and get at least on the surface reasonable and human-sounding responses.&lt;/p></description></item><item><title>Automated the Mundane</title><link>/post/automate-and-save/</link><pubDate>Fri, 18 Jul 2025 09:15:05 -0700</pubDate><guid>/post/automate-and-save/</guid><description>&lt;p>We often think that task automation is reserved for large tasks or companies rather than individuals. However this need not be the case.&lt;/p>
&lt;h2 id="a-few-minutes-can-save-you-hours">A Few Minutes Can Save You Hours&lt;/h2>
&lt;p>Think about your process every morning when you first log into your computer to work. It may look something like this:&lt;/p>
&lt;ul>
&lt;li>Open Outlook&lt;/li>
&lt;li>Open a web browser
&lt;ul>
&lt;li>Navigate to your company portal&lt;/li>
&lt;li>Open a new tab and navigate to other commonly used website(s)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Open your company chat app (Slack, Teams, etc.)&lt;/li>
&lt;li>Open the application you use most for work (VS Code, MS Word, MS Excel, etc.)&lt;/li>
&lt;/ul>
&lt;p>You might say, &amp;ldquo;That only takes a minute, so what?&amp;rdquo; Well, that&amp;rsquo;s one minute every day, maybe more if you do it multiple times. You could spend five minutes writing a script and never have to do all of that again.&lt;/p></description></item><item><title>Beginning Programming Lesson 08</title><link>/post/beginning-programming-lesson-08/</link><pubDate>Tue, 07 Feb 2023 13:05:11 -0700</pubDate><guid>/post/beginning-programming-lesson-08/</guid><description>&lt;p>Now that we have the basics down, let apply them to something more real, and perhaps the previous concepts covered will become more clear. When I learn a new programming language I generally start with trying to create a program to solve the Tricky Triangle. If you have ever been to Cracker Barrel, you know what it is. It goes by some other names too, but it is usually a triangular piece of wood with holes in it with enough golf tees to fill all but one whole. You play a checkers like jump rules where you remove the peg you jumped over You keep going until you have no available moves left. The goal is to only have one peg left. The code for the lesson is &lt;a href="https://github.com/jlhags/Beginning_Programming_In_Go/tree/main/Lesson_08">here&lt;/a>.&lt;/p></description></item><item><title>Beginning Programming Lesson 07</title><link>/post/beginning-programming-lesson-07/</link><pubDate>Mon, 16 Jan 2023 11:20:36 -0700</pubDate><guid>/post/beginning-programming-lesson-07/</guid><description>&lt;p>In previous lesson we put all of out code in one file and one package, &lt;code>main&lt;/code>. However, aside from very small projects, this won&amp;rsquo;t scale very well, and does make your code very reusable apart from copying and pasting. We have already seen the usefulness of packages through using the &lt;code>fmt&lt;/code> and &lt;code>errors&lt;/code> packages. So let&amp;rsquo;s look at how to create our own. You can find the code for today&amp;rsquo;s lesson &lt;a href="https://github.com/jlhags/Beginning_Programming_In_Go/tree/main/Lesson_07">here&lt;/a>. There is more than one file this time!&lt;/p></description></item><item><title>Beginning Programming Lesson 06</title><link>/post/beginning-programming-lesson-06/</link><pubDate>Wed, 07 Dec 2022 11:20:36 -0700</pubDate><guid>/post/beginning-programming-lesson-06/</guid><description>&lt;p>When I was in college my professor explained recursion as &amp;ldquo;Pretend you already have a function that does what you need to do.&amp;rdquo; The problem with that explanation is, it only makes sense after you understand recursion. I think we can do better here. While we are at it, let&amp;rsquo;s look at error handling too. You can find the code for today&amp;rsquo;s lesson &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_06/main.go">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f1fa8c">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> MinInputError &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (e &lt;span style="color:#ff79c6">*&lt;/span>MinInputError) &lt;span style="color:#50fa7b">Error&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;invalid input, number must be greater than 0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> MaxInputError &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (e &lt;span style="color:#ff79c6">*&lt;/span>MaxInputError) &lt;span style="color:#50fa7b">Error&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;invalid input, number must be less than 100&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">Factorial&lt;/span>(n &lt;span style="color:#8be9fd">int&lt;/span>) &lt;span style="color:#8be9fd">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> n &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#ff79c6">return&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> n &lt;span style="color:#ff79c6">*&lt;/span> &lt;span style="color:#50fa7b">Factorial&lt;/span>(n&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">Factorial2&lt;/span>(n &lt;span style="color:#8be9fd">int&lt;/span>) (&lt;span style="color:#8be9fd">int&lt;/span>, &lt;span style="color:#8be9fd">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> n &amp;lt; &lt;span style="color:#bd93f9">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>MinInputError{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> n &amp;gt; &lt;span style="color:#bd93f9">100&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>, &lt;span style="color:#ff79c6">&amp;amp;&lt;/span>MaxInputError{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ret &lt;span style="color:#ff79c6">:=&lt;/span> n
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">for&lt;/span> i &lt;span style="color:#ff79c6">:=&lt;/span> n &lt;span style="color:#ff79c6">-&lt;/span> &lt;span style="color:#bd93f9">1&lt;/span>; i &amp;gt; &lt;span style="color:#bd93f9">0&lt;/span>; i&lt;span style="color:#ff79c6">--&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		ret = ret &lt;span style="color:#ff79c6">*&lt;/span> i
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> ret, &lt;span style="color:#ff79c6">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#50fa7b">Factorial&lt;/span>(&lt;span style="color:#bd93f9">10&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#50fa7b">Factorial2&lt;/span>(&lt;span style="color:#bd93f9">10&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#50fa7b">Factorial2&lt;/span>(&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">10&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	f, err &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#50fa7b">Factorial2&lt;/span>(&lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">13&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> err &lt;span style="color:#ff79c6">!=&lt;/span> &lt;span style="color:#ff79c6">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		log.&lt;span style="color:#50fa7b">Print&lt;/span>(err)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	} &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	f, err = &lt;span style="color:#50fa7b">Factorial2&lt;/span>(&lt;span style="color:#bd93f9">100000000000&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> _, ok &lt;span style="color:#ff79c6">:=&lt;/span> err.(&lt;span style="color:#ff79c6">*&lt;/span>MaxInputError); ok {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Do something special&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	} &lt;span style="color:#ff79c6">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(f)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="recursion">Recursion&lt;/h2>
&lt;p>If you want to understand recursion, check out my tutorial on &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_06/main.go">recursion&lt;/a>. (:-p) (Sorry I couldn&amp;rsquo;t help myself). Anyway, a recursive function/method is one that calls itself in its definition. It&amp;rsquo;s probably best to look at an example. Let&amp;rsquo;s create a function that calculates the factorial of a number. In case you don&amp;rsquo;t recall:&lt;/p></description></item><item><title>Beginning Programming Lesson 05</title><link>/post/beginning-programming-lesson-05/</link><pubDate>Mon, 28 Nov 2022 07:03:58 -0700</pubDate><guid>/post/beginning-programming-lesson-05/</guid><description>&lt;p>We created complex data types (structs/classes), but what if we wanted to create another &lt;code>struct&lt;/code> that expands upon another? Or you wanted to create a number of different structs that play by a certain set of rules. The example code for today can be found &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_06/main.go">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f1fa8c">&amp;#34;math&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> Polygon &lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">Shape&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">Area&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> Rectangle &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Length &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Height &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span>r.Height &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span>r.Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">Area&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> r.Height &lt;span style="color:#ff79c6">*&lt;/span> r.Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">Shape&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;rectangle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">String&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> fmt.&lt;span style="color:#50fa7b">Sprintf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape: %s, Dimensions: %fx%f, Perimeter: %f, Area: %f&amp;#34;&lt;/span>, r.&lt;span style="color:#50fa7b">Shape&lt;/span>(), r.Length, r.Height, r.&lt;span style="color:#50fa7b">Perimeter&lt;/span>(), r.&lt;span style="color:#50fa7b">Area&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> ColoredRectangle &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Color &lt;span style="color:#8be9fd">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r ColoredRectangle) &lt;span style="color:#50fa7b">String&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> fmt.&lt;span style="color:#50fa7b">Sprintf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape: %s, Dimensions: %fx%f, Perimeter: %f, Area: %f, Color: %s&amp;#34;&lt;/span>, r.&lt;span style="color:#50fa7b">Shape&lt;/span>(), r.Length, r.Height, r.&lt;span style="color:#50fa7b">Perimeter&lt;/span>(), r.&lt;span style="color:#50fa7b">Area&lt;/span>(), r.Color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> Triangle &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Sides [&lt;span style="color:#bd93f9">3&lt;/span>]&lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> t.Sides[&lt;span style="color:#bd93f9">0&lt;/span>] &lt;span style="color:#ff79c6">+&lt;/span> t.Sides[&lt;span style="color:#bd93f9">1&lt;/span>] &lt;span style="color:#ff79c6">+&lt;/span> t.Sides[&lt;span style="color:#bd93f9">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">Area&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	p &lt;span style="color:#ff79c6">:=&lt;/span> t.&lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> math.&lt;span style="color:#50fa7b">Sqrt&lt;/span>(p &lt;span style="color:#ff79c6">*&lt;/span> (p &lt;span style="color:#ff79c6">-&lt;/span> t.Sides[&lt;span style="color:#bd93f9">0&lt;/span>]) &lt;span style="color:#ff79c6">*&lt;/span> (p &lt;span style="color:#ff79c6">-&lt;/span> t.Sides[&lt;span style="color:#bd93f9">1&lt;/span>]) &lt;span style="color:#ff79c6">*&lt;/span> (p &lt;span style="color:#ff79c6">-&lt;/span> t.Sides[&lt;span style="color:#bd93f9">2&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">Shape&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;triangle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">String&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> fmt.&lt;span style="color:#50fa7b">Sprintf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape: %s, Dimensions: %fx%fx%f, Perimeter: %f, Area: %f&amp;#34;&lt;/span>, t.&lt;span style="color:#50fa7b">Shape&lt;/span>(), t.Sides[&lt;span style="color:#bd93f9">0&lt;/span>], t.Sides[&lt;span style="color:#bd93f9">1&lt;/span>], t.Sides[&lt;span style="color:#bd93f9">2&lt;/span>], t.&lt;span style="color:#50fa7b">Perimeter&lt;/span>(), t.&lt;span style="color:#50fa7b">Area&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">printSlice&lt;/span>(s []&lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">for&lt;/span> i, v &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#ff79c6">range&lt;/span> s {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;%d - %v\n&amp;#34;&lt;/span>, i, v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	rect &lt;span style="color:#ff79c6">:=&lt;/span> Rectangle{Length: &lt;span style="color:#bd93f9">5&lt;/span>, Height: &lt;span style="color:#bd93f9">4&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	tri &lt;span style="color:#ff79c6">:=&lt;/span> Triangle{Sides: [&lt;span style="color:#bd93f9">3&lt;/span>]&lt;span style="color:#8be9fd">float64&lt;/span>{&lt;span style="color:#bd93f9">4&lt;/span>, &lt;span style="color:#bd93f9">5&lt;/span>, &lt;span style="color:#bd93f9">6&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(rect)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(tri)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> polys []Polygon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	polys = &lt;span style="color:#8be9fd;font-style:italic">append&lt;/span>(polys, rect)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	polys = &lt;span style="color:#8be9fd;font-style:italic">append&lt;/span>(polys, tri)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> cr ColoredRectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cr.Height = &lt;span style="color:#bd93f9">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cr.Length = &lt;span style="color:#bd93f9">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cr.Color = &lt;span style="color:#f1fa8c">&amp;#34;red&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	polys = &lt;span style="color:#8be9fd;font-style:italic">append&lt;/span>(polys, cr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(polys)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">for&lt;/span> _, p &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#ff79c6">range&lt;/span> polys {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape 1 type: %s\n&amp;#34;&lt;/span>, polys[&lt;span style="color:#bd93f9">0&lt;/span>].&lt;span style="color:#50fa7b">Shape&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	random &lt;span style="color:#ff79c6">:=&lt;/span> []&lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span>{}{&lt;span style="color:#bd93f9">1&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;blue&amp;#34;&lt;/span>, rect, tri}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">printSlice&lt;/span>(random)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> _, ok &lt;span style="color:#ff79c6">:=&lt;/span> random[&lt;span style="color:#bd93f9">1&lt;/span>].(Polygon); !ok {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Not a polygon&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(random[&lt;span style="color:#bd93f9">2&lt;/span>].(Polygon).&lt;span style="color:#50fa7b">Shape&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="interfaces">Interfaces&lt;/h2>
&lt;p>An interface in general provides a way of communication between two or more parties. A GUI (Graphical User Interface) provides a means communication between a computer and a human. In the case of Golang and many other programming languages, an interface is a definition of how a &lt;code>struct&lt;/code> must behave in order to work with other portions of code that expect them to follow the definition. In our last lesson we created a &lt;code>struct&lt;/code> &lt;code>polygon&lt;/code>. It had a method to calculate the perimeter. What if we wanted to have it calculate area? Well, the area calculation varies from polygon to polygon. While there are a number of ways we could deal with this, let&amp;rsquo;s see how we could use interfaces to help.&lt;/p></description></item><item><title>Beginning Programming Lesson 04</title><link>/post/beginning-programming-lesson-04/</link><pubDate>Mon, 14 Nov 2022 11:13:23 -0700</pubDate><guid>/post/beginning-programming-lesson-04/</guid><description>&lt;p>We now know how to create and use variables, structs, and functions. But thus far, all the examples have been fairly linear. What if we want do things only when certain criteria are met? Or what if we want to do the same thing many times in a row? What if we want want store a bunch of a rectangles from the previous lesson? This is where control structures, arrays and slices come in handy. You can download this lessons code &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_02/main.go">here&lt;/a>.&lt;/p></description></item><item><title>Why Do Arrays Start at Zero?</title><link>/post/why-do-arrays-start-at-zero/</link><pubDate>Fri, 11 Nov 2022 12:29:33 -0700</pubDate><guid>/post/why-do-arrays-start-at-zero/</guid><description>&lt;p>A common point of confusion for new programmers arises when trying to access a item in an array/list/slice/string etc. The &amp;ldquo;first&amp;rdquo; item is not located in position 1, but rather it is in position 0, or so it seems. The reason for this is all thanks to the programming language C. But why is C like that? For this we need to understand &lt;a href="/post/beginning-programming-lesson-02/">pointers&lt;/a>. A pointer is a &lt;a href="/post/beginning-programming-lesson-02/">variable&lt;/a> that stores a memory location holding a value. More specifically it is the beginning position in memory. For example, say we have a string &amp;ldquo;abcdefg&amp;rdquo; and using ACSII each character is 1 byte. Lets also say it is stored in memory starting at location 42. I will be using the decimal representation for the sake of simplicity:&lt;/p></description></item><item><title>Beginning Programming Lesson 03</title><link>/post/beginning-programming-lesson-03/</link><pubDate>Tue, 08 Nov 2022 09:03:18 -0700</pubDate><guid>/post/beginning-programming-lesson-03/</guid><description>&lt;p>In the last installment of this series we learned about variables, and covered some simple variable types. Now we are going to learn about complex data types. In short, they store more than a single data point of information. For example, what if we wanted to have a variable that stored information about a rectangle? There is more than one bit of information to describe it. At minimum you would probably want to store its width and length. Depending on the language you use, there are different terms for the data types that can hold such information. The main two are classes and structs (short for structures). Some languages use both, but in the case of Golang it uses structs. You can download the example code &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_03/main.go">here&lt;/a>, or see below:&lt;/p></description></item><item><title>Beginning Programming Lesson 02</title><link>/post/beginning-programming-lesson-02/</link><pubDate>Tue, 01 Nov 2022 09:22:40 -0700</pubDate><guid>/post/beginning-programming-lesson-02/</guid><description>&lt;p>Now that you have your setup ready to go, we can start writing some code! Note that we are just touching the surface of the topics covered in this lesson, but the sooner you start writing code, the easier it will become to understand the topics better. Plus you are more likely to continue, if you feel like you are accomplishing something, rather than learning more and more theory.
You can download the file &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_02/main.go">here&lt;/a>. I suggest creating a folder to store all the files for this and future examples. Also create a sub-folder for each individual lesson, since they all will be named &lt;code>main.go&lt;/code>. Open it up in VS Code, and open a terminal. Make sure you are in the correct folder/directory by using the &lt;code>pwd&lt;/code> command. Use the &lt;code>cd&lt;/code> command to change directories if needed. Then go ahead and run it by executing:&lt;/p></description></item><item><title>Beginning Programming Lesson 01</title><link>/post/beginning-programming-lesson-01/</link><pubDate>Fri, 28 Oct 2022 09:15:05 -0700</pubDate><guid>/post/beginning-programming-lesson-01/</guid><description>&lt;p>When I was about 12 years old, my aunt gave us an old computer. Without going into all the details, I broke it, and all that it would then let you do is write programs in BASIC. It came with a book explaining how to do various things with the language. So having nothing better to do, I worked through it and taught myself how to code, and eventually went to college to learn how to do it better. Now I make a living writing software. I have good news for you. For most people and what they want to do with software development, you don&amp;rsquo;t need to spend tons of money. You can find pretty much everything you need on the Internet. With the tutorials that follow I hope to make it even easier for you. Basic understanding on how to use a computer, browse the Web, and some middle school math is required, but that&amp;rsquo;s pretty much it. We won&amp;rsquo;t go into exhaustive detail on every topic covered in this series, but it should be enough to get you going. So, let&amp;rsquo;s get on with what you will need.&lt;/p></description></item><item><title>Introduction to the Command Line</title><link>/post/introduction-to-the-commandline/</link><pubDate>Fri, 21 Oct 2022 11:05:10 -0700</pubDate><guid>/post/introduction-to-the-commandline/</guid><description>&lt;p>The command line can feel a bit like a step backwards in terms of user experience, or even intimidating. However, it can be a very powerful tool, and even impossible to avoid if you want to program or be involved in IT.&lt;/p>
&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>Probably the most recognizable image of the command line is that black box on the screen with green text. Basically it is a place to interact with your computer via text rather than photos (mostly). You&amp;rsquo;ll need an application called a &amp;ldquo;terminal&amp;rdquo; or &amp;ldquo;terminal emulator&amp;rdquo; to get started. Also, you will need to select a shell. Think of it as what interprets the text you type, and the terminal displays it. Each operating system has it&amp;rsquo;s own default shell, but for the most part you have at least a few alternatives. There are plenty of articles written on the subject. So, we are just going to look at some high level concepts. In general a command entered into the terminal is broken into 3 parts.&lt;/p></description></item></channel></rss>