<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Categories/History on Theoretically Josh</title><link>/categories/history/</link><description>Recent content in Categories/History on Theoretically Josh</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Jul 2025 05:57:10 -0700</lastBuildDate><atom:link href="/categories/history/index.xml" rel="self" type="application/rss+xml"/><item><title>Why Do Arrays Start at Zero?</title><link>/post/why-do-arrays-start-at-zero/</link><pubDate>Fri, 11 Nov 2022 12:29:33 -0700</pubDate><guid>/post/why-do-arrays-start-at-zero/</guid><description>&lt;p>A common point of confusion for new programmers arises when trying to access a item in an array/list/slice/string etc. The &amp;ldquo;first&amp;rdquo; item is not located in position 1, but rather it is in position 0, or so it seems. The reason for this is all thanks to the programming language C. But why is C like that? For this we need to understand &lt;a href="/post/beginning-programming-lesson-02/">pointers&lt;/a>. A pointer is a &lt;a href="/post/beginning-programming-lesson-02/">variable&lt;/a> that stores a memory location holding a value. More specifically it is the beginning position in memory. For example, say we have a string &amp;ldquo;abcdefg&amp;rdquo; and using ACSII each character is 1 byte. Lets also say it is stored in memory starting at location 42. I will be using the decimal representation for the sake of simplicity:&lt;/p></description></item></channel></rss>