<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tags/Type Assertion on Theoretically Josh</title><link>/tags/type-assertion/</link><description>Recent content in Tags/Type Assertion on Theoretically Josh</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Jul 2025 05:57:10 -0700</lastBuildDate><atom:link href="/tags/type-assertion/index.xml" rel="self" type="application/rss+xml"/><item><title>Beginning Programming Lesson 05</title><link>/post/beginning-programming-lesson-05/</link><pubDate>Mon, 28 Nov 2022 07:03:58 -0700</pubDate><guid>/post/beginning-programming-lesson-05/</guid><description>&lt;p>We created complex data types (structs/classes), but what if we wanted to create another &lt;code>struct&lt;/code> that expands upon another? Or you wanted to create a number of different structs that play by a certain set of rules. The example code for today can be found &lt;a href="https://raw.githubusercontent.com/jlhags/Beginning_Programming_In_Go/main/Lesson_06/main.go">here&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">package&lt;/span> main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ff79c6">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f1fa8c">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#f1fa8c">&amp;#34;math&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> Polygon &lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">Shape&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">Area&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> Rectangle &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Length &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Height &lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span>r.Height &lt;span style="color:#ff79c6">+&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>&lt;span style="color:#ff79c6">*&lt;/span>r.Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">Area&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> r.Height &lt;span style="color:#ff79c6">*&lt;/span> r.Length
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">Shape&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;rectangle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r Rectangle) &lt;span style="color:#50fa7b">String&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> fmt.&lt;span style="color:#50fa7b">Sprintf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape: %s, Dimensions: %fx%f, Perimeter: %f, Area: %f&amp;#34;&lt;/span>, r.&lt;span style="color:#50fa7b">Shape&lt;/span>(), r.Length, r.Height, r.&lt;span style="color:#50fa7b">Perimeter&lt;/span>(), r.&lt;span style="color:#50fa7b">Area&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> ColoredRectangle &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Rectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Color &lt;span style="color:#8be9fd">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (r ColoredRectangle) &lt;span style="color:#50fa7b">String&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> fmt.&lt;span style="color:#50fa7b">Sprintf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape: %s, Dimensions: %fx%f, Perimeter: %f, Area: %f, Color: %s&amp;#34;&lt;/span>, r.&lt;span style="color:#50fa7b">Shape&lt;/span>(), r.Length, r.Height, r.&lt;span style="color:#50fa7b">Perimeter&lt;/span>(), r.&lt;span style="color:#50fa7b">Area&lt;/span>(), r.Color)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">type&lt;/span> Triangle &lt;span style="color:#8be9fd;font-style:italic">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Sides [&lt;span style="color:#bd93f9">3&lt;/span>]&lt;span style="color:#8be9fd">float64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> t.Sides[&lt;span style="color:#bd93f9">0&lt;/span>] &lt;span style="color:#ff79c6">+&lt;/span> t.Sides[&lt;span style="color:#bd93f9">1&lt;/span>] &lt;span style="color:#ff79c6">+&lt;/span> t.Sides[&lt;span style="color:#bd93f9">2&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">Area&lt;/span>() &lt;span style="color:#8be9fd">float64&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	p &lt;span style="color:#ff79c6">:=&lt;/span> t.&lt;span style="color:#50fa7b">Perimeter&lt;/span>() &lt;span style="color:#ff79c6">/&lt;/span> &lt;span style="color:#bd93f9">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> math.&lt;span style="color:#50fa7b">Sqrt&lt;/span>(p &lt;span style="color:#ff79c6">*&lt;/span> (p &lt;span style="color:#ff79c6">-&lt;/span> t.Sides[&lt;span style="color:#bd93f9">0&lt;/span>]) &lt;span style="color:#ff79c6">*&lt;/span> (p &lt;span style="color:#ff79c6">-&lt;/span> t.Sides[&lt;span style="color:#bd93f9">1&lt;/span>]) &lt;span style="color:#ff79c6">*&lt;/span> (p &lt;span style="color:#ff79c6">-&lt;/span> t.Sides[&lt;span style="color:#bd93f9">2&lt;/span>]))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">Shape&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;triangle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> (t Triangle) &lt;span style="color:#50fa7b">String&lt;/span>() &lt;span style="color:#8be9fd">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">return&lt;/span> fmt.&lt;span style="color:#50fa7b">Sprintf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape: %s, Dimensions: %fx%fx%f, Perimeter: %f, Area: %f&amp;#34;&lt;/span>, t.&lt;span style="color:#50fa7b">Shape&lt;/span>(), t.Sides[&lt;span style="color:#bd93f9">0&lt;/span>], t.Sides[&lt;span style="color:#bd93f9">1&lt;/span>], t.Sides[&lt;span style="color:#bd93f9">2&lt;/span>], t.&lt;span style="color:#50fa7b">Perimeter&lt;/span>(), t.&lt;span style="color:#50fa7b">Area&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">printSlice&lt;/span>(s []&lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span>{}) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">for&lt;/span> i, v &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#ff79c6">range&lt;/span> s {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;%d - %v\n&amp;#34;&lt;/span>, i, v)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">func&lt;/span> &lt;span style="color:#50fa7b">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	rect &lt;span style="color:#ff79c6">:=&lt;/span> Rectangle{Length: &lt;span style="color:#bd93f9">5&lt;/span>, Height: &lt;span style="color:#bd93f9">4&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	tri &lt;span style="color:#ff79c6">:=&lt;/span> Triangle{Sides: [&lt;span style="color:#bd93f9">3&lt;/span>]&lt;span style="color:#8be9fd">float64&lt;/span>{&lt;span style="color:#bd93f9">4&lt;/span>, &lt;span style="color:#bd93f9">5&lt;/span>, &lt;span style="color:#bd93f9">6&lt;/span>}}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(rect)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(tri)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> polys []Polygon
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	polys = &lt;span style="color:#8be9fd;font-style:italic">append&lt;/span>(polys, rect)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	polys = &lt;span style="color:#8be9fd;font-style:italic">append&lt;/span>(polys, tri)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> cr ColoredRectangle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cr.Height = &lt;span style="color:#bd93f9">7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cr.Length = &lt;span style="color:#bd93f9">8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	cr.Color = &lt;span style="color:#f1fa8c">&amp;#34;red&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	polys = &lt;span style="color:#8be9fd;font-style:italic">append&lt;/span>(polys, cr)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(polys)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">for&lt;/span> _, p &lt;span style="color:#ff79c6">:=&lt;/span> &lt;span style="color:#ff79c6">range&lt;/span> polys {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(p)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Printf&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Shape 1 type: %s\n&amp;#34;&lt;/span>, polys[&lt;span style="color:#bd93f9">0&lt;/span>].&lt;span style="color:#50fa7b">Shape&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	random &lt;span style="color:#ff79c6">:=&lt;/span> []&lt;span style="color:#8be9fd;font-style:italic">interface&lt;/span>{}{&lt;span style="color:#bd93f9">1&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;blue&amp;#34;&lt;/span>, rect, tri}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#50fa7b">printSlice&lt;/span>(random)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#ff79c6">if&lt;/span> _, ok &lt;span style="color:#ff79c6">:=&lt;/span> random[&lt;span style="color:#bd93f9">1&lt;/span>].(Polygon); !ok {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;Not a polygon&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	fmt.&lt;span style="color:#50fa7b">Println&lt;/span>(random[&lt;span style="color:#bd93f9">2&lt;/span>].(Polygon).&lt;span style="color:#50fa7b">Shape&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="interfaces">Interfaces&lt;/h2>
&lt;p>An interface in general provides a way of communication between two or more parties. A GUI (Graphical User Interface) provides a means communication between a computer and a human. In the case of Golang and many other programming languages, an interface is a definition of how a &lt;code>struct&lt;/code> must behave in order to work with other portions of code that expect them to follow the definition. In our last lesson we created a &lt;code>struct&lt;/code> &lt;code>polygon&lt;/code>. It had a method to calculate the perimeter. What if we wanted to have it calculate area? Well, the area calculation varies from polygon to polygon. While there are a number of ways we could deal with this, let&amp;rsquo;s see how we could use interfaces to help.&lt;/p></description></item></channel></rss>